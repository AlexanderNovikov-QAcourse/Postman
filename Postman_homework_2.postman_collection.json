{
	"info": {
		"_postman_id": "bf3a6fc4-e234-4b5f-8503-a242569da369",
		"name": "hwork_2",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "21333038"
	},
	"item": [
		{
			"name": "http://162.55.220.72:5005/first",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//http://162.55.220.72:5005/first\r",
							"//1. Отправить запрос.\r",
							"//2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//3. Проверить, что в body приходит правильный string.\r",
							"pm.test(\"Body is correct string\", function () {\r",
							"  pm.response.to.have.body(\"This is the first responce from server!\");\r",
							"});\r",
							"var resp_body=pm.response.body\r",
							"console.log(\"resp_body===\", resp_body)"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/first",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"first"
					]
				}
			},
			"response": []
		},
		{
			"name": "http://162.55.220.72:5005/user_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// http://162.55.220.72:5005/user_info_3\r",
							"// 1. Отправить запрос.\r",
							"// 2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 3. Спарсить response body в json.\r",
							"var resp_json=pm.response.json()\r",
							"\r",
							"// 4. Проверить, что name в ответе равно name s request (name вбить руками.)\r",
							"pm.test(\"Name in response is equal to name in request\", function () {\r",
							"        pm.expect(resp_json.name).to.eql(\"Al\");\r",
							"});\r",
							"\r",
							"//5. Проверить, что age в ответе равно age s request (age вбить руками.)\r",
							"pm.test(\"Age in response equal to age in request\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(resp_json.age).to.eql(\"37\");\r",
							"});\r",
							"\r",
							"// 6. Проверить, что salary в ответе равно salary s request (salary вбить руками.)\r",
							"pm.test(\"Salary in response equal to salary in request\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(resp_json.salary).to.eql(100500);\r",
							"});\r",
							"\r",
							"//7. Спарсить request.\r",
							"var request_data=request.data\r",
							"\r",
							"//8. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"Name in reply equal to name in request\", function(){\r",
							"pm.expect(request_data.name).to.eql(resp_json.name)\r",
							"});\r",
							"\r",
							"//9. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"pm.test(\"Age in reply equal to age in request\", function(){\r",
							"pm.expect(request_data.age).to.eql(resp_json.age)\r",
							"});\r",
							"\r",
							"//10. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"pm.test(\"Salary in reply equal to salary in request\", function(){\r",
							"pm.expect(request_data.salary).to.eql((resp_json.salary).toString())\r",
							"});\r",
							"\r",
							"//11. Вывести в консоль параметр family из response.\r",
							"console.log(resp_json.family)\r",
							"\r",
							"//12. Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)\r",
							"pm.test(\"salary_1_5_year in reply equal to salary*4 in request\", function(){\r",
							"pm.expect(resp_json.family.u_salary_1_5_year).to.eql((request_data.salary*4))\r",
							"});\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Al",
							"type": "text"
						},
						{
							"key": "age",
							"value": "37",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "100500",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_3",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_3"
					]
				}
			},
			"response": []
		},
		{
			"name": "162.55.220.72:5005/object_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//http://162.55.220.72:5005/object_info_3\r",
							"//1. Отправить запрос.\r",
							"//2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//3. Спарсить response body в json.\r",
							"var resp_json=pm.response.json()\r",
							"\r",
							"//4. Спарсить request.\r",
							"var req = pm.request.url.query.toObject()\r",
							"\r",
							"//5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"Name in response equal to name in request\", function () {\r",
							"    pm.expect(resp_json.name).to.eql(req.name)\r",
							" });\r",
							"\r",
							" //6. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"pm.test(\"Age in response equal to age in request\", function () {\r",
							"    pm.expect(resp_json.age).to.eql(req.age)\r",
							" });\r",
							"\r",
							"//7. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"pm.test(\"Salary in response === Salary in request\", function () {\r",
							"    pm.expect(resp_json.salary.toString()).to.eql(req.salary)\r",
							" });\r",
							"\r",
							" //8. Вывести в консоль параметр family из response.\r",
							" console.log(resp_json.family)\r",
							"\r",
							" //9. Проверить, что у параметра dog есть параметры name.\r",
							" pm.test(\"dog has the name property\", function() {\r",
							"  pm.expect(resp_json.family.pets.dog).to.have.property(\"name\");\r",
							"})\r",
							"\r",
							"//10. Проверить, что у параметра dog есть параметры age.\r",
							" pm.test(\"dog has the age property\", function() {\r",
							"  pm.expect(resp_json.family.pets.dog).to.have.property(\"age\");\r",
							"  })\r",
							"\r",
							"//11. Проверить, что параметр name имеет значение Luky.\r",
							"pm.test(\"dog.name equal to \\\"Luky\", function() {\r",
							"  pm.expect(resp_json.family.pets.dog.name).to.eql(\"Luky\");\r",
							"  })\r",
							"  \r",
							"  //12. Проверить, что параметр age имеет значение 4.\r",
							"pm.test(\"dog.age===4\", function() {\r",
							"  pm.expect(resp_json.family.pets.dog.age).to.eql(4);\r",
							"  })\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_3?name=Al&age=37&salary=100500",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Al"
						},
						{
							"key": "age",
							"value": "37"
						},
						{
							"key": "salary",
							"value": "100500"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "http://162.55.220.72:5005/object_info_4?name=Al&age=37&salary=100500",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//http://162.55.220.72:5005/object_info_4\r",
							"//1. Отправить запрос.\r",
							"//2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 3. Спарсить response body в json.\r",
							"var resp=pm.response.json()\r",
							"\r",
							"// 4. Спарсить request.\r",
							"var req=pm.request.url.query.toObject()\r",
							"\r",
							"// 5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"Name in the response equal to name in request\", function () {\r",
							"    pm.expect(resp.name).to.eql(req.name);\r",
							"});\r",
							"\r",
							"// 6. Проверить, что age в ответе равно age из request (age забрать из request.)\r",
							"pm.test(\"Age in response equal to age in request\", function(){\r",
							"pm.expect(resp.age.toString()).to.eql(req.age)\r",
							"});\r",
							"\r",
							"// 7. Вывести в консоль параметр salary из request.\r",
							"console.log(req.salary)\r",
							"\r",
							"// 8. Вывести в консоль параметр salary из response.\r",
							"console.log(resp.salary)\r",
							"\r",
							"// 9. Вывести в консоль 0-й элемент параметра salary из response.\r",
							"console.log(resp.salary[0])\r",
							"\r",
							"// 10. Вывести в консоль 1-й элемент параметра salary параметр salary из response.\r",
							"console.log(resp.salary[1])\r",
							"\r",
							"// 11. Вывести в консоль 2-й элемент параметра salary параметр salary из response.\r",
							"console.log(resp.salary[2])\r",
							"\r",
							"// 12. Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)\r",
							"pm.test(\"salary[0] in response equal to  salary in request\", function(){\r",
							"pm.expect(resp.salary[0].toString()).to.eql(req.salary)\r",
							"});\r",
							"\r",
							"// 13. Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)\r",
							"pm.test(\"salary[1] in response equal to salary*2 in request\", function(){\r",
							"pm.expect(+resp.salary[1]).to.eql(req.salary*2)\r",
							"});\r",
							"\r",
							"// 14. Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)\r",
							"pm.test(\"salary[2] in response equal to salary*3 in request\", function(){\r",
							"pm.expect(+resp.salary[2]).to.eql(req.salary*3)\r",
							"});\r",
							"\r",
							"// 15. Создать в окружении переменную name\r",
							"pm.environment.set(\"name\")\r",
							"\r",
							"// 16. Создать в окружении переменную age\r",
							"pm.environment.set(\"age\")\r",
							"\r",
							"// 17. Создать в окружении переменную salary\r",
							"pm.environment.set(\"salary\")\r",
							"\r",
							"// 18. Передать в окружение переменную name\r",
							"pm.environment.set(\"name\", \"Al\")\r",
							"\r",
							"// 19. Передать в окружение переменную age\r",
							"pm.environment.set(\"age\", 37)\r",
							"// 20. Передать в окружение переменную salary\r",
							"pm.environment.set(\"salary\", 100500)\r",
							"\r",
							"\r",
							"//21. Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.\r",
							"salary=resp.salary\r",
							"\r",
							"salary.forEach(function(element){\r",
							"    console.log(element)\r",
							"    }\r",
							");\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_4?name=Al&age=37&salary=100500",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "Al"
						},
						{
							"key": "age",
							"value": "37"
						},
						{
							"key": "salary",
							"value": "100500"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "http://162.55.220.72:5005/user_info_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Вставить параметр salary из окружения в request\r",
							"// 2. Вставить параметр age из окружения в age\r",
							"// 3. Вставить параметр name из окружения в name\r",
							"// 4. Отправить запрос.\r",
							"\r",
							"// 5. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 6. Спарсить response body в json.\r",
							"resp = pm.response.json()\r",
							"\r",
							"// 7. Спарсить request.\r",
							"req = request.data\r",
							"\r",
							"\r",
							"// 8. Проверить, что json response имеет параметр start_qa_salary\r",
							"pm.test(\"json response contains \\\"start_qa_salary\\\" parameter\", function () {\r",
							"    pm.expect(resp).to.have.property(\"start_qa_salary\");\r",
							"})\r",
							"\r",
							"// 9. Проверить, что json response имеет параметр qa_salary_after_6_months\r",
							"pm.test(\"json response contains \\\"qa_salary_after_6_months\\\" parameter\", function () {\r",
							"    pm.expect(resp).to.have.property(\"qa_salary_after_6_months\");\r",
							"})\r",
							"\r",
							"// 10. Проверить, что json response имеет параметр qa_salary_after_12_months\r",
							"pm.test(\"json response contains \\\"qa_salary_after_12_months\\\" parameter\", function () {\r",
							"    pm.expect(resp).to.have.property(\"qa_salary_after_12_months\");\r",
							"})\r",
							"\r",
							"// 11. Проверить, что json response имеет параметр qa_salary_after_1.5_year\r",
							"pm.test(\"json response contains \\\"qa_salary_after_12_months\\\" parameter\", function () {\r",
							"    pm.expect(resp).to.have.property(\"qa_salary_after_12_months\");\r",
							"})\r",
							"\r",
							"// 12. Проверить, что json response имеет параметр qa_salary_after_3.5_years\r",
							"pm.test(\"json response contains \\\"qa_salary_after_3.5_years\\\" parameter\", function() {\r",
							"pm.expect(resp).to.have.property(\"qa_salary_after_3.5_years\");\r",
							" })\r",
							"\r",
							"// 13. Проверить, что json response имеет параметр person\r",
							"pm.test(\"json response contains \\\"person\\\" parameter\", function() {\r",
							"pm.expect(resp).to.have.property(\"person\");\r",
							" })\r",
							"\r",
							"// 14. Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)\r",
							"pm.test(\"start_qa_salary equal to salary from request\", function() {\r",
							"pm.expect(resp.start_qa_salary.toString()).to.eql(req.salary);\r",
							" })\r",
							"\r",
							"// 15. Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)\r",
							"pm.test(\"start_qa_salary equal to salary from request\", function() {\r",
							"pm.expect(resp.start_qa_salary).to.eql(req.salary*1);\r",
							" })\r",
							"\r",
							"// 16. Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)\r",
							"pm.test(\"qa_salary_after_12_months equal to salary*2.7 from request\", function() {\r",
							"pm.expect(resp.qa_salary_after_12_months).to.eql(req.salary*2.7);\r",
							" })\r",
							"\r",
							"// 17. Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)\r",
							"pm.test(\"qa_salary_after_1.5_year equal to salary*3.3 from request\", function() {\r",
							"pm.expect(resp[\"qa_salary_after_1.5_year\"]).to.eql(req.salary*3.3);\r",
							" })\r",
							"// 18. Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)\r",
							"pm.test(\"qa_salary_after_3.5_years equal to salary*2.7 from request\", function() {\r",
							"pm.expect(resp[\"qa_salary_after_3.5_years\"]).to.eql(req.salary*3.8);\r",
							" })\r",
							"\r",
							"// 19. Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)\r",
							"pm.test(\"u_name[1] equal to salary from request\", function() {\r",
							"pm.expect(resp.person.u_name[1]).to.eql(req.salary*1);\r",
							" })\r",
							"\r",
							"// 20. Проверить, что что параметр u_age равен age из request (age забрать из request.)\r",
							"pm.test(\"u_age equal to age from request\", function() {\r",
							"pm.expect(resp.person.u_age).to.eql(req.age*1);\r",
							" })\r",
							"\r",
							"// 21. Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)\r",
							"pm.test(\"u_salary_5_years equal to salary from request\", function() {\r",
							"pm.expect(resp.person.u_salary_5_years).to.eql(req.salary*4.2);\r",
							" })\r",
							"\r",
							"// 22. ***Написать цикл который выведет в консоль по порядку элементы списка из параметра person.\r",
							"\r",
							"// solution 1\r",
							"person=resp.person\r",
							"console.log(\"Task 22. Solution 1:\")\r",
							"for (var a in person) {\r",
							"  console.log(a+\": \"+person[a]);\r",
							"}\r",
							"\r",
							"//solution 2\r",
							"person_1=Object.entries(person)\r",
							"console.log(\"Task 22. Solution 2:\")\r",
							" person_1.forEach(function(element){\r",
							"   console.log(element)\r",
							"     }\r",
							" );"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_2",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		}
	]
}